// <auto-generated />
using System;
using IPLLive.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IPLLive.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421041401_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IPLLive.API.Models.BallByBallData", b =>
                {
                    b.Property<int>("BallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BallId"));

                    b.Property<int>("BallNumber")
                        .HasColumnType("int");

                    b.Property<int>("BatsmanId")
                        .HasColumnType("int");

                    b.Property<int>("BowlerId")
                        .HasColumnType("int");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExtraRuns")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraType")
                        .HasColumnType("int");

                    b.Property<int?>("FielderId")
                        .HasColumnType("int");

                    b.Property<int>("InningsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExtra")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWicket")
                        .HasColumnType("bit");

                    b.Property<int>("NonStrikerId")
                        .HasColumnType("int");

                    b.Property<int>("OverNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerOutId")
                        .HasColumnType("int");

                    b.Property<int>("RunsScored")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WicketType")
                        .HasColumnType("int");

                    b.HasKey("BallId");

                    b.HasIndex("BatsmanId");

                    b.HasIndex("BowlerId");

                    b.HasIndex("FielderId");

                    b.HasIndex("InningsId");

                    b.HasIndex("NonStrikerId");

                    b.HasIndex("PlayerOutId");

                    b.ToTable("BallByBallData");
                });

            modelBuilder.Entity("IPLLive.API.Models.BattingPerformance", b =>
                {
                    b.Property<int>("BattingPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattingPerformanceId"));

                    b.Property<int>("BallsFaced")
                        .HasColumnType("int");

                    b.Property<int>("BattingPosition")
                        .HasColumnType("int");

                    b.Property<int?>("BowledById")
                        .HasColumnType("int");

                    b.Property<int?>("CaughtById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DismissalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Fours")
                        .HasColumnType("int");

                    b.Property<int>("InningsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotOut")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<int>("Sixes")
                        .HasColumnType("int");

                    b.HasKey("BattingPerformanceId");

                    b.HasIndex("BowledById");

                    b.HasIndex("CaughtById");

                    b.HasIndex("InningsId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BattingPerformances");
                });

            modelBuilder.Entity("IPLLive.API.Models.BowlingPerformance", b =>
                {
                    b.Property<int>("BowlingPerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BowlingPerformanceId"));

                    b.Property<int>("InningsId")
                        .HasColumnType("int");

                    b.Property<int>("Maidens")
                        .HasColumnType("int");

                    b.Property<int>("NoBalls")
                        .HasColumnType("int");

                    b.Property<decimal>("Overs")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RunsConceded")
                        .HasColumnType("int");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.Property<int>("Wides")
                        .HasColumnType("int");

                    b.HasKey("BowlingPerformanceId");

                    b.HasIndex("InningsId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BowlingPerformances");
                });

            modelBuilder.Entity("IPLLive.API.Models.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("CoachId");

                    b.HasIndex("TeamId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("IPLLive.API.Models.Innings", b =>
                {
                    b.Property<int>("InningsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InningsId"));

                    b.Property<int>("BattingTeamId")
                        .HasColumnType("int");

                    b.Property<int>("BowlingTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Byes")
                        .HasColumnType("int");

                    b.Property<int>("InningsNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LegByes")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("NoBalls")
                        .HasColumnType("int");

                    b.Property<decimal>("Overs")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PenaltyRuns")
                        .HasColumnType("int");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.Property<int>("Wides")
                        .HasColumnType("int");

                    b.HasKey("InningsId");

                    b.HasIndex("BattingTeamId");

                    b.HasIndex("BowlingTeamId");

                    b.HasIndex("MatchId");

                    b.ToTable("Innings");
                });

            modelBuilder.Entity("IPLLive.API.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("MatchNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ScheduledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TossDecision")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TossWinnerTeamId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.Property<string>("WinMargin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TossWinnerTeamId");

                    b.HasIndex("VenueId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("IPLLive.API.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("BattingStyle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BowlingStyle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverseasPlayer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("IPLLive.API.Models.PointsTableEntry", b =>
                {
                    b.Property<int>("PointsTableEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointsTableEntryId"));

                    b.Property<decimal>("AgainstOvers")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("AgainstRuns")
                        .HasColumnType("int");

                    b.Property<decimal>("ForOvers")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ForRuns")
                        .HasColumnType("int");

                    b.Property<int>("Lost")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<decimal>("NetRunRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("NoResult")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Tied")
                        .HasColumnType("int");

                    b.Property<int>("Won")
                        .HasColumnType("int");

                    b.HasKey("PointsTableEntryId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("PointsTableEntries");
                });

            modelBuilder.Entity("IPLLive.API.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<int>("InningsId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Overs")
                        .HasColumnType("int");

                    b.Property<int>("Runs")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Wickets")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("InningsId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("IPLLive.API.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("SeasonId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("IPLLive.API.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int?>("HomeVenueId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TeamId");

                    b.HasIndex("HomeVenueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IPLLive.API.Models.Umpire", b =>
                {
                    b.Property<int>("UmpireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UmpireId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UmpireId");

                    b.ToTable("Umpires");
                });

            modelBuilder.Entity("IPLLive.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IPLLive.API.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("MatchUmpire", b =>
                {
                    b.Property<int>("MatchesMatchId")
                        .HasColumnType("int");

                    b.Property<int>("UmpiresUmpireId")
                        .HasColumnType("int");

                    b.HasKey("MatchesMatchId", "UmpiresUmpireId");

                    b.HasIndex("UmpiresUmpireId");

                    b.ToTable("MatchUmpires", (string)null);
                });

            modelBuilder.Entity("IPLLive.API.Models.BallByBallData", b =>
                {
                    b.HasOne("IPLLive.API.Models.Player", "Batsman")
                        .WithMany()
                        .HasForeignKey("BatsmanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "Bowler")
                        .WithMany()
                        .HasForeignKey("BowlerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "Fielder")
                        .WithMany()
                        .HasForeignKey("FielderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IPLLive.API.Models.Innings", "Innings")
                        .WithMany("BallByBallData")
                        .HasForeignKey("InningsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "NonStriker")
                        .WithMany()
                        .HasForeignKey("NonStrikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "PlayerOut")
                        .WithMany()
                        .HasForeignKey("PlayerOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Batsman");

                    b.Navigation("Bowler");

                    b.Navigation("Fielder");

                    b.Navigation("Innings");

                    b.Navigation("NonStriker");

                    b.Navigation("PlayerOut");
                });

            modelBuilder.Entity("IPLLive.API.Models.BattingPerformance", b =>
                {
                    b.HasOne("IPLLive.API.Models.Player", "BowledBy")
                        .WithMany()
                        .HasForeignKey("BowledById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IPLLive.API.Models.Player", "CaughtBy")
                        .WithMany()
                        .HasForeignKey("CaughtById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IPLLive.API.Models.Innings", "Innings")
                        .WithMany("BattingPerformances")
                        .HasForeignKey("InningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "Player")
                        .WithMany("BattingPerformances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BowledBy");

                    b.Navigation("CaughtBy");

                    b.Navigation("Innings");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("IPLLive.API.Models.BowlingPerformance", b =>
                {
                    b.HasOne("IPLLive.API.Models.Innings", "Innings")
                        .WithMany("BowlingPerformances")
                        .HasForeignKey("InningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Player", "Player")
                        .WithMany("BowlingPerformances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Innings");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("IPLLive.API.Models.Coach", b =>
                {
                    b.HasOne("IPLLive.API.Models.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IPLLive.API.Models.Innings", b =>
                {
                    b.HasOne("IPLLive.API.Models.Team", "BattingTeam")
                        .WithMany()
                        .HasForeignKey("BattingTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "BowlingTeam")
                        .WithMany()
                        .HasForeignKey("BowlingTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Match", "Match")
                        .WithMany("Innings")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattingTeam");

                    b.Navigation("BowlingTeam");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("IPLLive.API.Models.Match", b =>
                {
                    b.HasOne("IPLLive.API.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "TossWinnerTeam")
                        .WithMany()
                        .HasForeignKey("TossWinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IPLLive.API.Models.Venue", "Venue")
                        .WithMany("Matches")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Season");

                    b.Navigation("TossWinnerTeam");

                    b.Navigation("Venue");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("IPLLive.API.Models.Player", b =>
                {
                    b.HasOne("IPLLive.API.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IPLLive.API.Models.PointsTableEntry", b =>
                {
                    b.HasOne("IPLLive.API.Models.Season", "Season")
                        .WithMany("PointsTable")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IPLLive.API.Models.Score", b =>
                {
                    b.HasOne("IPLLive.API.Models.Innings", "Innings")
                        .WithMany()
                        .HasForeignKey("InningsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Innings");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IPLLive.API.Models.Team", b =>
                {
                    b.HasOne("IPLLive.API.Models.Venue", "HomeVenue")
                        .WithMany("HomeTeams")
                        .HasForeignKey("HomeVenueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HomeVenue");
                });

            modelBuilder.Entity("MatchUmpire", b =>
                {
                    b.HasOne("IPLLive.API.Models.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchesMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPLLive.API.Models.Umpire", null)
                        .WithMany()
                        .HasForeignKey("UmpiresUmpireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IPLLive.API.Models.Innings", b =>
                {
                    b.Navigation("BallByBallData");

                    b.Navigation("BattingPerformances");

                    b.Navigation("BowlingPerformances");
                });

            modelBuilder.Entity("IPLLive.API.Models.Match", b =>
                {
                    b.Navigation("Innings");
                });

            modelBuilder.Entity("IPLLive.API.Models.Player", b =>
                {
                    b.Navigation("BattingPerformances");

                    b.Navigation("BowlingPerformances");
                });

            modelBuilder.Entity("IPLLive.API.Models.Season", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("PointsTable");
                });

            modelBuilder.Entity("IPLLive.API.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("Coaches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("IPLLive.API.Models.Venue", b =>
                {
                    b.Navigation("HomeTeams");

                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
